name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

# Add permissions for GitLeaks and other security tools
permissions:
  contents: read
  pull-requests: read
  security-events: write

jobs:
  # Fast linting and security - runs in parallel
  lint-and-security:
    name: Lint & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better security scanning

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        # Temporarily disable caching until package-lock.json is regenerated
        # cache: 'npm'

    - name: Install dependencies
      run: npm install  # Use npm install to generate lock file
    - name: ESLint Check
      run: |
        # Fast ESLint run on changed files only
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Get changed files
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.(js|ts)$' | xargs)
          if [ -n "$CHANGED_FILES" ]; then
            npx eslint $CHANGED_FILES
          fi
        else
          # Full lint on main branch
          npx eslint src/ test/ --ext .js,.ts
        fi

    - name: TypeScript Check
      run: npx tsc --noEmit

    - name: Solidity Lint
      run: npx solhint 'contracts/**/*.sol'

    - name: Security - GitLeaks
      run: |
        # Install gitleaks
        wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz
        tar -xzf gitleaks.tar.gz
        chmod +x gitleaks
        # Run gitleaks scan
        ./gitleaks detect --source . --verbose --no-git || (
          echo "⚠️  GitLeaks found potential secrets. Check the output above."
          echo "If these are false positives, add them to .gitleaksignore"
          exit 1
        )

  # Fast tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        # Temporarily disable caching until package-lock.json is regenerated
        # cache: 'npm'

    - name: Install dependencies
      run: npm install  # Use npm install to generate lock file

    - name: Compile contracts
      run: npx hardhat compile

    - name: Run unit tests
      run: npm run test:unit

    - name: Run contract tests
      run: npm run test:contracts

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.json,./coverage.xml
        fail_ci_if_error: false

  # Docker build test
  docker:
    name: Docker
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4

    - name: Test Docker Compose
      run: |
        docker compose config
        docker compose build --dry-run

  # Final status check
  ci-complete:
    name: CI Complete
    needs: [lint-and-security, test, docker]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Check Status
      run: |
        if [ "${{ needs.lint-and-security.result }}" != "success" ] || 
           [ "${{ needs.test.result }}" != "success" ] || 
           [ "${{ needs.docker.result }}" != "success" ]; then
          echo "CI failed"
          exit 1
        fi
        echo "✅ All checks passed!"
